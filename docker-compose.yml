services:
  # --------------------------------
  # Traefik Reverse Proxy
  # --------------------------------
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: always
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"                         # Dashboard available on :8080 (insecure for dev). Remove/increase security for prod.
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"     # HTTP
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ecommerce-network

  # --------------------------------
  # MongoDB
  # --------------------------------
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --------------------------------
  # RabbitMQ
  # --------------------------------
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --------------------------------
  # Redis
  # --------------------------------
  redis:
    image: redis:7.4
    container_name: redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --------------------------------
  # API Gateway
  # --------------------------------
  api-gateway:
    build: ./services/api-gateway
    container_name: api-gateway
    restart: always
    environment:
      PORT: 8000
      JWT_SECRET: ${JWT_SECRET}
      AUTH_SERVICE_URL: ${AUTH_SERVICE_URL}
      COMPANY_SERVICE_URL: ${COMPANY_SERVICE_URL}
      SHOP_SERVICE_URL: ${SHOP_SERVICE_URL}
      ECOMMERCE_SERVICE_URL: ${ECOMMERCE_SERVICE_URL}
      SALES_SERVICE_URL: ${SALES_SERVICE_URL}
      PAYMENT_SERVICE_URL: ${PAYMENT_SERVICE_URL}
      INVENTORY_SERVICE_URL: ${INVENTORY_SERVICE_URL}
      CHAT_SERVICE_URL: ${CHAT_SERVICE_URL}
      NOTIFICATION_SERVICE_URL: ${NOTIFICATION_SERVICE_URL}
      WEBSOCKET_SERVICE_URL: ${WEBSOCKET_SERVICE_URL}
      AUDIT_SERVICE_URL: ${AUDIT_SERVICE_URL}
      ANALYTICS_SERVICE_URL: ${ANALYTICS_SERVICE_URL}
      DEBT_SERVICE_URL: ${DEBT_SERVICE_URL}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-gateway.rule=Host(`api.localhost`)"
      - "traefik.http.services.api-gateway.loadbalancer.server.port=8000"

  # --------------------------------
  # Auth Service
  # --------------------------------
  auth-service:
    build: ./services/auth-service
    container_name: auth-service
    restart: always
    environment:
      PORT: ${AUTH_SERVICE_PORT:-8001}
      DB_MONGO: ${DB_MONGO}/authdb?authSource=admin
      RABBITMQ_URL: ${RABBITMQ_URL}
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - ecommerce-network
    volumes:
      - ./services/auth-service:/app
      - ./shared:/app/shared
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.localhost`)"
      - "traefik.http.services.auth.loadbalancer.server.port=8001"

  # --------------------------------
  # Company Service
  # --------------------------------
  company-service:
    build: ./services/company-service
    container_name: company-service
    restart: always
    environment:
      PORT: ${COMPANY_SERVICE_PORT:-8002}
      MONGODB_URI: ${DB_MONGO}/companydb?authSource=admin
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/company-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.company.rule=Host(`company.localhost`)"
      - "traefik.http.services.company.loadbalancer.server.port=8009"

  # --------------------------------
  # Chat Service
  # --------------------------------
  chat-service:
    build: ./services/chat-service
    container_name: chat-service
    restart: always
    environment:
      PORT: 3003
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/chat-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat.rule=Host(`chat.localhost`)"
      - "traefik.http.services.chat.loadbalancer.server.port=3003"

  # --------------------------------
  # Ecommerce Service
  # --------------------------------
  ecommerce-service:
    build: ./services/ecommerce-service
    container_name: ecommerce-service
    restart: always
    environment:
      PORT: 3004
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/ecommerce-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ecommerce.rule=Host(`ecommerce.localhost`)"
      - "traefik.http.services.ecommerce.loadbalancer.server.port=3004"

  # --------------------------------
  # Sales Service
  # --------------------------------
  sales-service:
    build: ./services/sales-service
    container_name: sales-service
    restart: always
    environment:
      PORT: 3005
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/sales-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sales.rule=Host(`sales.localhost`)"
      - "traefik.http.services.sales.loadbalancer.server.port=3005"

  # --------------------------------
  # Inventory Service
  # --------------------------------
  inventory-service:
    build: ./services/inventory-service
    container_name: inventory-service
    restart: always
    environment:
      PORT: 3006
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/inventory-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.inventory.rule=Host(`inventory.localhost`)"
      - "traefik.http.services.inventory.loadbalancer.server.port=3006"

  # --------------------------------
  # Notification Service
  # --------------------------------
  notification-service:
    build: ./services/notification-service
    container_name: notification-service
    restart: always
    environment:
      PORT: 3007
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/notification-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.notification.rule=Host(`notify.localhost`)"
      - "traefik.http.services.notification.loadbalancer.server.port=3007"

  # --------------------------------
  # Shop Service
  # --------------------------------
  shop-service:
    build: ./services/shop-service
    container_name: shop-service
    restart: always
    environment:
      PORT: 3008
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/shop-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.shop.rule=Host(`shop.localhost`)"
      - "traefik.http.services.shop.loadbalancer.server.port=3008"

  # --------------------------------
  # Audit Service
  # --------------------------------
  audit-service:
    build: ./services/audit-service
    container_name: audit-service
    restart: always
    environment:
      PORT: 3009
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/audit-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.audit.rule=Host(`audit.localhost`)"
      - "traefik.http.services.audit.loadbalancer.server.port=3009"

  # --------------------------------
  # Analytics Service
  # --------------------------------
  analytics-service:
    build: ./services/analytics-service
    container_name: analytics-service
    restart: always
    environment:
      PORT: 3010
      MONGO_URI: ${DB_MONGO}
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/analytics-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.analytics.rule=Host(`analytics.localhost`)"
      - "traefik.http.services.analytics.loadbalancer.server.port=3010"

  # --------------------------------
  # WebSocket Service
  # --------------------------------
  websocket-service:
    build: ./services/websocket-service
    container_name: websocket-service
    restart: always
    environment:
      PORT: 3011
      RABBITMQ_URL: ${RABBITMQ_URL}
      JWT_SECRET: ${JWT_SECRET}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - ecommerce-network
    volumes:
      - ./services/websocket-service:/app
      - /app/node_modules
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.websocket.rule=Host(`ws.localhost`)"
      - "traefik.http.services.websocket.loadbalancer.server.port=3011"

volumes:
  mongodb_data:
  rabbitmq_data:
  redis_data:

networks:
  ecommerce-network:
    driver: bridge
